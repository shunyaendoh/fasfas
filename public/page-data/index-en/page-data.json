{"componentChunkName":"component---src-pages-index-en-js","path":"/index-en/","result":{"data":{"allMarkdownRemark":{"nodes":[{"frontmatter":{"title":"セブ島留学中にサービスを作ってみた","date":"2019-10-27","keywords":"macOS","image":"https://webty.jp/staffblog/wp-content/uploads/2019/08/thumbnail_laravel-660x500.png"},"excerpt":"はじめに セブ島でのエンジニア留学の集大成として４人チームで１つのサービスを開発したのでそのまとめです。 成果物 サービスの名前はアイデア村 / ideathonです。\n私たちはアイデアを通じて人と人を繋げるをモットーにこのサービスを作りました。 ideathon…","html":"<h1>はじめに</h1>\n<p>セブ島でのエンジニア留学の集大成として４人チームで１つのサービスを開発したのでそのまとめです。</p>\n<h2>成果物</h2>\n<p>サービスの名前は<font color=“red”>アイデア村 / ideathon</font>です。\n私たちは<code>アイデアを通じて人と人を繋げる</code>をモットーにこのサービスを作りました。</p>\n<p>ideathonは<code>ビジネスパートナーを見つけるアイデア投稿、共有サービス</code>です。\nもし他のユーザーのアイデアを気に入ったら、お気に入りに登録しても良いですしチャットする事も可能です。</p>\n<h2>苦労した点</h2>\n<p>このサービスを作るにあたって、いくつかの壁がありました。それは、</p>\n<ol>\n<li>時間が限られている</li>\n<li>メンバーの熱量、技量が違う</li>\n<li>人に教えることの難しさ</li>\n<li>自分の技術不足</li>\n</ol>\n<h3>1. 時間が限られている</h3>\n<p>留学期間はカリキュラムがあり、私たちは企画から作成、デプロイまで３週間ほどでした。\n３週間と聞くとそんなに長いの？と感じるかもしれないですが、チーム開発未経験でそもそもプログラミング初学者にとって３週間は短いのです。</p>\n<p>この問題解決のためにtrelloのサービスを使って今は何をすべきなのかを細分化して１つ１つ機能を作って行きました。</p>\n<p>もちろん全てを完璧に作る事は出来ませんでしたが、\n<code>Done is better than perfect.</code>という事でとにかく使えるところまで持っていこうと努力しました。</p>\n<h3>2. メンバーの熱量、技量が違う</h3>\n<p>正直なところ、メンバー４人のうち2人はプログラミングが得意とは言えませんでした。\nしかしながら、人には得意不得意があります。\n留学期間中、私たちは何回かプレゼンを英語でする機会があったのですが、英語のスクリプトを考えてくれたりして他のメンバーが助けてくれました。\nプログラミングに対しても、偉そうな言い方になりますが、成長が顕著に見られ、多くの貢献をしてくれました。</p>\n<h3>3. 人に教えることの難しさ</h3>\n<p>他のメンバーに分からない事があった場合、基本的には講師の人か自分に質問が来ます。\n気づいた事は、<code>人に教える為には深く理解していないと噛み砕いて話せない</code>という事で、\nこの事は逆に、<code>教える事で自分の理解が深まる</code>という事です。\n難しさを感じつつ、とても自分の為になったと感じています。\n講師の方が<code>ラーニングピラミッド</code>の話を留学初期にされたのですが、身に染みて体験出来ました。</p>\n<h3>4. 自分の技術不足</h3>\n<p>この問題は1~3全ての問題と関係していて、自分にもっと技術があれば全て解決出来ていました。\n何度も歯痒い思いをしましたが、デプロイした際の高揚感はなんとも言えませんでした。</p>\n<h2>ちなみに</h2>\n<p>アイデア村 / ideathon は<a href=\"https://www.ideathon.site\">www.ideathon.site</a>からアクセスすることが可能です。</p>","fields":{"slug":"/ideathon/"}},{"frontmatter":{"title":"GitHubの複数アカウントをコマンドから操作しよう","date":"2019-10-16","keywords":"macOS","image":"https://www.blog.danishi.net/wp-content/uploads/2019/05/github-logo_hub2899c31b6ca7aed8d6a218f0e752fe4_46649_1200x1200_fill_box_center_2.png"},"excerpt":"はじめに GitHubの使っていたアカウントのレポジトリがぐちゃぐちゃになってしまって何が何だかわからない！\nって事でGitの練習も兼ねてサブアカウントを作ってコマンドから両方操作できるようにしてみようと思った次第です。 サブアカウントを作ろう Github…","html":"<h1>はじめに</h1>\n<p>GitHubの使っていたアカウントのレポジトリがぐちゃぐちゃになってしまって何が何だかわからない！\nって事でGitの練習も兼ねてサブアカウントを作ってコマンドから両方操作できるようにしてみようと思った次第です。</p>\n<h2>サブアカウントを作ろう</h2>\n<p>Githubで普通にサブアカウントを作りました。</p>\n<h2>ssh認証鍵を作ろう</h2>\n<p><code>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"</code> => sshキーを生成 ( <code>-t</code>:鍵のタイプ。 <code>-b</code>:鍵の長さ。デフォルトは2,048bitだがGithubは安全性の高い4,096bitを推奨している。<code>-C</code>:コメント )</p>\n<p><code>ls ~/.ssh/id_rsa_github*</code> => 生成した鍵の確認</p>\n<p><code>chmod 600 ~/.ssh/id_rsa_github</code> => 秘密鍵(.pubがついてない方)のパーミッションを変更</p>\n<p><code>vi ~/.ssh/config</code> => sshのコンフィグファイルに以下のように記述する</p>\n<pre><code>Host github-sub\n  HostName github.com\n  IdentityFile ~/.ssh/sub_rsa\n  User git\n  Port 22\n  TCPKeepAlive yes\n  IdentitiesOnly yes\n  \nHost github\n  HostName github.com\n  IdentityFile ~/.ssh/main_rsa\n  User git\n  Port 22\n  TCPKeepAlive yes\n  IdentitiesOnly yes\n</code></pre>\n<p><code>ssh -T &#x3C;HOST></code> => ssh接続できているかの確認</p>\n<img width=\"100%\" alt=\"スクリーンショット 2019-10-08 10 24 24\" src=\"https://user-images.githubusercontent.com/55518345/66364083-14491200-e9bb-11e9-9e58-a74a26f5567c.png\">\n<h2>Gitのコンフィグファイルを編集しよう</h2>\n<p><code>vi ~/.bashrc</code> => bashの設定ファイルをvimで開きます。</p>\n<p><code>iキー</code>を入力してインサートモードにしてから</p>\n<p>以下を.bashrcの中に追記してください。</p>\n<pre><code>function tomain() {\n  git config --global user.name \"&#x3C;MAIN_ACCOUNT>\"\n  git config --global user.email \"&#x3C;MAIN_ADDRESS>\"\n}\n\nfunction tosub() {\n  git config --global user.name \"&#x3C;SUB_ACCOUNT>\"\n  git config --global user.email \"&#x3C;SUB_ADDRESS>\"\n}\n</code></pre>\n<p><code>escキー</code> => <code>:wq</code>で保存です。</p>\n<p>次に.bashrc内記述を反映させるために<code>source ~/.bashrc</code>コマンドを実行してください。</p>\n<p>これで、</p>\n<p><code>tomain</code> => メインアカウントに切替え\n<code>tosub</code> => サブアカウントに切替え</p>\n<p>コマンドでアカウント切替えができるようになりました。</p>\n<h2>Githubで鍵を設定しよう</h2>\n<p><code>setting</code> => <code>SSH and GPG keys</code> => <code>New SSH key</code></p>\n<p>中に<code>open ~/.ssh</code>で確認できる、\n<code>.pub</code>がついているファイルをテキストエディタ等で開いてコピーペーストしてください。</p>\n<h2>複数アカウントによる問題点</h2>\n<ol>\n<li><code>git init</code></li>\n<li><code>git add &#x3C;ファイル名></code></li>\n<li><code>git commit -m \"&#x3C;コメント>\"</code></li>\n<li><code>git remote add origin &#x3C;URL(https://github.com/&#x3C;アカウント名>/&#x3C;レポジトリ名>.git)></code></li>\n<li><code>git push -u origin master</code></li>\n</ol>\n<p>複数アカウントがあると、これではエラーになります。\n( sshのコンフィグファイルがしたに記述した方を優先的に使用するからです。 )\nそこで、</p>\n<ol>\n<li><code>git init</code></li>\n<li><code>git add &#x3C;ファイル名></code></li>\n<li><code>git commit -m \"&#x3C;コメント>\"</code></li>\n<li><code>git remote add origin git@github(-sub):&#x3C;URL(&#x3C;アカウント名>/&#x3C;レポジトリ名>.git)></code></li>\n<li><code>git push -u origin master</code></li>\n</ol>\n<p>これで解決です。</p>\n<h2>参考サイト</h2>\n<p>・ <a href=\"https://employment.en-japan.com/engineerhub/entry/2017/01/31/110000\">今日からはじめるGitHub</a></p>\n<p>・ <a href=\"https://qiita.com/yamataku29/items/4744c9c70ad793c83b82\">複数のgitアカウントを使用する場合</a></p>","fields":{"slug":"/Github/"}},{"frontmatter":{"title":"Qiitaを書くためにMarkdown記法を学ぶ","date":"2019-9-20","keywords":"markdown","image":"https://teams.qiita.com/wp-content/uploads/2017/12/qiita-1-300x300.png"},"excerpt":"はじめに これからQiitaを書きたいが、\n「 Markdown記法ってなんだ！？ 」ってレベルの人（自分のことです）のための記事。\n簡単にQiitaの書き方を下に書いています。 ・Markdownってそもそもなんなの？ Markdown…","html":"<h1>はじめに</h1>\n<blockquote>\n<p>これからQiitaを書きたいが、\n「 Markdown記法ってなんだ！？ 」ってレベルの人（自分のことです）のための記事。\n簡単にQiitaの書き方を下に書いています。</p>\n</blockquote>\n<p>・<b>Markdownってそもそもなんなの？</b></p>\n<blockquote>\n<p>Markdown => マークアップ言語のひとつで書きやすくて読みやすい。メールを書くときのように書きやすく、見栄えもするようにHTML文書へ変換されるフォーマット。2004年に<a href=\"https://twitter.com/gruber\">John Gruber</a>が頑張って作ってくれた。ありがとう。</p>\n</blockquote>\n<hr>\n<h2>コードの挿入</h2>\n<pre><code> (空白行)\n```[言語名:ファイル名]\n  ~　　　          #ここにコードを書く\n```　　　　　\n (空白行)\n</code></pre>\n<h5>例</h5>\n<pre><code class=\"language-php5:example.php\"> echo 'うまくコードが記入できたかな？';\n</code></pre>\n<p>また、単にバッククォート(`)で囲むと、\n<code>このように</code>なりコードの一部を表示するのに使う。</p>\n<h5>例</h5>\n<blockquote>\n<p><code>npm start</code>でプロジェクトを実行してください。</p>\n</blockquote>\n<hr>\n<h2>見出し</h2>\n<p>#の数で表現する。\n<code>#&#x3C;h1>タグを表します。</code>\n<code>##&#x3C;h2>タグを表します。</code>\n<code>###&#x3C;h3>タグを表します。</code></p>\n<h5>例</h5>\n<blockquote>\n<h1>&#x3C;h1>タグを表します。</h1>\n</blockquote>\n<h2>&#x3C;h2>タグを表します。</h2>\n<h3>&#x3C;h3>タグを表します。</h3>\n<hr>\n<h2>リンクの挿入</h2>\n<p><code>[コンテンツ](URL)</code></p>\n<h5>例</h5>\n<blockquote>\n<p><a href=\"https://twitter.com/gruber\">John Gruber</a></p>\n</blockquote>\n<hr>\n<h2>画像の挿入</h2>\n<p><code>ドラッグ&#x26;ドロップ</code>\nもしくは\n<code>![alt](URL \"タイトル\")</code>\nもしくは\n<code>&#x3C;img width=\"幅\" alt=\"代替テキスト\" src=\"URL\"></code></p>\n<h5>例</h5>\n<p><code>![IMG_0134.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/73e90b31-7e8a-7a25-90ee-b8394cbe6f51.jpeg)</code></p>\n<blockquote>\n<p><img src=\"https://teams.qiita.com/wp-content/uploads/2017/12/qiita-1-300x300.png\" alt=\"IMG_0134.JPG\"></p>\n</blockquote>\n<hr>\n<h2>水平線</h2>\n<p><code>***</code>\nもしくは\n<code>---</code></p>\n<h5>例</h5>\n<blockquote>\n<hr>\n</blockquote>\n<hr>\n<hr>\n<hr>\n<h2>打ち消し線</h2>\n<p><code>~~コンテンツ~~</code></p>\n<h5>例</h5>\n<blockquote>\n<p><del>今日の夕食はお寿司です。</del>\n*追記 カレーになりました。</p>\n</blockquote>\n<hr>\n<h2>注釈</h2>\n<p><code>コンテンツ[^1]</code>\n<code>[^1]: 注釈内容</code></p>\n<h5>例</h5>\n<blockquote>\n<p>今日の夕食はカレー<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>です。</p>\n</blockquote>\n<hr>\n<h2>テーブル(表)の挿入</h2>\n<p><code>column(列) x row(行)</code></p>\n<h5>例</h5>\n<p><code>3x2</code>\n<br>\n<code>| 1 | 2 | 3 |</code> <br>\n<code>|:-:|:-:|:-:|</code> <br>\n<code>| a | a | a |</code> <br>\n<code>| b | b | b |</code> <br>\n*<code>:-:</code>の部分を<code>:--</code>に変えると左寄せ、<code>--:</code>で右寄せ</p>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">a</td>\n<td align=\"center\">a</td>\n<td align=\"center\">a</td>\n</tr>\n<tr>\n<td align=\"center\">b</td>\n<td align=\"center\">b</td>\n<td align=\"center\">b</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<hr>\n<h2>イタリック体(斜体)</h2>\n<p><code>*コンテンツ*</code></p>\n<h5>例</h5>\n<blockquote>\n<p><em>イタリック体</em>とは手書きのような書体のことであり<em>斜体</em>と同義ではない。単に斜めになっている書体は<em>オブリーク</em>という。<font color=red>結局よくわからん。</font></p>\n</blockquote>\n<hr>\n<h2>フォントカラー(文字色)</h2>\n<p><code>&#x3C;font color=[color]> コンテンツ &#x3C;/font></code></p>\n<h5>例</h5>\n<blockquote>\n<p><em>イタリック体の章でフライングしてしまったが、<font color=blue>このように</font>文字色を変更することができる。</em></p>\n</blockquote>\n<hr>\n<h2>引用</h2>\n<p><code>>引用文</code>\n<code>>>引用文</code></p>\n<h5>例</h5>\n<blockquote>\n<p>引用文</p>\n<blockquote>\n<p>引用文</p>\n<blockquote>\n<p>引用文</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<hr>\n<h2>エスケープ処理</h2>\n<p><code>\\マークダウン記号</code></p>\n<h5>例</h5>\n<blockquote>\n<p>`code記法ができないよ〜`</p>\n</blockquote>\n<hr>\n<h3>参考サイト</h3>\n<ul>\n<li><a href=\"https://qiita.com/kamorits/items/6f342da395ad57468ae3#%E3%83%9E%E3%83%BC%E3%82%AF%E3%83%80%E3%82%A6%E3%83%B3%E3%81%AE%E3%82%A8%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%97\">Qiita マークダウン記法 一覧表・チートシート</a></li>\n<li><a href=\"https://qiita.com/hiroyuki_hon/items/f2a779bb295fd12646ab\">Qiita書き方メモ</a></li>\n<li><a href=\"https://qiita.com/tbpgr/items/989c6badefff69377da7\">Markdown記法 サンプル集</a> <br>\n<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>: ビーフカレー</li>\n</ul>","fields":{"slug":"/markdawnForQiita copy/"}},{"frontmatter":{"title":"macOS CatalinaにアップデートしてXAMPPが使えなくなった人へ","date":"2019-10-14","keywords":"macOS","image":"https://cnet2.cbsistatic.com/img/uku7sSxJf3Y_lnD_KQ2I8RYbdL4=/1092x0/2019/10/07/fc04b95e-1b6f-4ed7-8c1a-be77243b4291/macos-catalina.png"},"excerpt":"はじめに 「macOS Catalina(ver.10.15)にアップデートしたらXAMPPが起動しない！」って人が周りに何人かいたので、\n「これを機にXAMPPを卒業しよう！」って事で記事を書きました。 XAMPPの何が悪いの？ XAMPPは手軽にPHP…","html":"<h1>はじめに</h1>\n<p>「macOS Catalina(ver.10.15)にアップデートしたらXAMPPが起動しない！」って人が周りに何人かいたので、\n「<font color=\"red\">これを機にXAMPPを卒業しよう！</font>」って事で記事を書きました。</p>\n<h2>XAMPPの何が悪いの？</h2>\n<p>XAMPPは手軽にPHPのローカル開発環境が作れます。\nボタン一つでApacheサーバーを立ち上げ,\nMYSQLとやりとり出来るでしょう。めっちゃ便利です。\nでも<font color=\"red\">ダサい！</font>\nターミナルを使ってコマンドで立ち上げた方がかっこいい！\n特に悪いところは見つかりません。笑\n強いて言えば実践的ではないところですかね？\n( 御指南お願いします。 )</p>\n<h2>準備</h2>\n<ul>\n<li><code>macOS</code>をアップデートしましょう。 ( おそらくあなたは今ここです。 )</li>\n<li><code>XCode</code>をアップデートしておきましょう。 ( ターミナルで<code>xcode-select --install</code>コマンドでインストールできます。 )</li>\n<li><code>ターミナル</code>を開きましょう。 ( iterm2がおすすめです。 )</li>\n</ul>\n<h2>Homebrewをインストールしよう</h2>\n<p>ターミナル上で、</p>\n<pre><code>/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n</code></pre>\n<p>こちらをコピーペーストで実行しましょう。\n( 2019/10/14日現在のコマンドです。<a href=\"https://brew.sh/index_ja\">公式サイト</a>でインストール欄を確認することをおすすめします。 )</p>\n<p>エンターキーを入力してくださいやらmacのパスワードを入力してくださいやら出てきますが指示に従ってください。</p>\n<p>インストールが完了したら、</p>\n<pre><code>brew -v\n</code></pre>\n<p>を入力して実行です。 ( Homebrewのバージョンを確認するコマンドです。 )</p>\n<img width=\"100%\" alt=\"スクリーンショット 2019-10-14 12.41.08.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/8ecb66de-a4d6-dfc4-a416-24de7d8557cb.png\">\n<p>こちらのように出れば成功です。</p>\n<h2>Mysqlをインストールしよう</h2>\n<p>次にMYsqlをHomebrewを利用してインストールしていきます。 ( 今回使うのはMysql@5.7です。 )</p>\n<p>ターミナル上で、</p>\n<pre><code>brew install mysql@5.7\n</code></pre>\n<p>と入力して実行してください。</p>\n<h2>実際に使ってみよう</h2>\n<p>まずは、</p>\n<pre><code> echo 'export PATH=\"/usr/local/opt/mysql@5.7/bin:$PATH\"' >> ~/.bash_profile\n</code></pre>\n<pre><code>source ~/.bash_profile\n</code></pre>\n<pre><code>mysql.server start\n</code></pre>\n<p>と順番に入力して実行してください。\n( SUCCESSと出れば成功です。 )</p>\n<p>次に、</p>\n<pre><code>mysql -u root -p\n</code></pre>\n<p>上のコマンドを実行してください。\n( ユーザー=>ルート, パスワード=>無しという意味です。 )</p>\n<p>その後に、<code>Enter password</code>と出てパスワードを入力するように促されますが、そのままエンターキーを押してください。 ( 今回はパスワードは無しにしたからです。 )</p>\n<p>下の画像は実際の画面です。</p>\n<img width=\"100%\" alt=\"スクリーンショット 2019-10-14 12.51.13.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/c3c0aff3-98bf-123a-d168-e8c853d7161f.png\">\n<h2>Mysqlを操作してみよう</h2>\n<p><code>show databases;</code> => 今あるデータベースの一覧を表示します。\n<code>create database {データベース名} default character set utf8mb4 collate utf8mb4_unicode_ci;</code> => データベースを作ります。\n<code>use {データベース名};</code> => データベースを使います。\n<code>show tables;</code> => テーブルの一覧を出します。\n<code>select * from {テーブル名};</code> => テーブルの中身を確認します。</p>\n<p>他のコマンドは適宜確認してみてください。</p>\n<p>終了するときは、</p>\n<pre><code>exit\n</code></pre>\n<p>してから、</p>\n<pre><code>mysql.server stop\n</code></pre>\n<p>でサーバーを閉じてください。</p>\n<h3>コマンドで操作するのめんどくさい！</h3>\n<p><code>sequel pro</code>で検索すると幸せになれます。</p>","fields":{"slug":"/macOS/"}},{"frontmatter":{"title":"今までやった環境構築メモ","date":"2019-11-2","keywords":"markdown","image":"https://media.mstdn.io/mstdn-media/media_attachments/files/002/495/471/original/f36581dfec7e9d8a.png"},"excerpt":"Homebrewのインストール Homebrewのインストール here node.jsの環境構築 nodebrewのインストール brew install nodebrew nodebrew -v node.jsのインストール nodebrew install-binary…","html":"<h1>Homebrewのインストール</h1>\n<ol>\n<li>\n<p>Homebrewのインストール</p>\n<ul>\n<li><a href=\"https://brew.sh/index_ja.html\">here</a></li>\n</ul>\n</li>\n</ol>\n<h1>node.jsの環境構築</h1>\n<ol>\n<li>\n<p>nodebrewのインストール</p>\n<ul>\n<li><code>brew install nodebrew</code></li>\n<li><code>nodebrew -v</code></li>\n</ul>\n</li>\n<li>\n<p>node.jsのインストール</p>\n<ul>\n<li><code>nodebrew install-binary stable</code> : latest or {version}</li>\n<li><code>nodebrew use stable</code> : latest or {varsion}</li>\n<li><code>'export PATH=$HOME/.nodebrew/current/bin:$PATH'</code></li>\n</ul>\n</li>\n</ol>\n<h1>pythonの環境構築</h1>\n<ol>\n<li>\n<p>pipのインストール</p>\n<ul>\n<li><a href=\"curl%20https://bootstrap.pypa.io/get-pip.py%20-o%20get-pip.py\">here</a></li>\n<li><code>python get-pip.py</code> : pipインストール </li>\n</ul>\n</li>\n<li>\n<p>pyenvのインストール</p>\n<ul>\n<li>homebrewのインストール</li>\n<li><code>brew install pyenv</code></li>\n<li><code>pyenv install {version}</code></li>\n<li><code>pyenv global {version}</code> : PCのpythonのバージョン切替え</li>\n<li><code>pyenv local {version}</code> : カレントディレクトリの 〃</li>\n<li>$ echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc</li>\n<li>$ echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc</li>\n<li>$ echo 'eval \"$(pyenv init -)\"' >> ~/.zshrc</li>\n</ul>\n</li>\n<li>\n<p>anacondaのインストール</p>\n<ul>\n<li><a href=\"https://www.anaconda.com/distribution/#download\">here</a></li>\n</ul>\n</li>\n</ol>\n<h1>Goの環境構築</h1>\n<ol>\n<li>\n<p>Goのインストール</p>\n<ul>\n<li><code>brew install go</code></li>\n<li><code>go get golang.org/x/tools/cmd/godoc</code> : 試しにgodocを入れてみる</li>\n<li><code>godoc fmt</code> : fmtが入ったか確認</li>\n</ul>\n</li>\n</ol>\n<h1>PHPの環境構築( +α Laravel )</h1>\n<ol>\n<li>\n<p>PHPのインストール</p>\n<ul>\n<li><code>brew install php@7.2</code></li>\n<li><code>sudo vi /etc/apache2/thhpd/conf</code> : php7_module追加</li>\n</ul>\n</li>\n<li>\n<p>Laravelのインストール</p>\n<ul>\n<li><code>curl -sS https://getcomposer.org/installer | php</code> : comporser</li>\n<li><code>sudo mv composer.phar /usr/local/bin/composer</code> : 〃 移動</li>\n<li><code>composer --version</code> : バージョン確認</li>\n<li><code>composer global require laravel/installer</code> : Laravel CLI</li>\n<li><code>export PATH=~/.composer/vendor/bin:$PATH</code></li>\n</ul>\n</li>\n<li>\n<p>Laravel立ち上げ</p>\n<ul>\n<li><code>laravel new {project}</code></li>\n<li><code>composer create-project --prefer-dist laravel/laravel {project}</code></li>\n<li><code>php artisan serve</code></li>\n</ul>\n</li>\n</ol>\n<h1>MySQLの環境構築( +α Sequel pro )</h1>\n<ol>\n<li>\n<p>MySQLのインストール</p>\n<ul>\n<li><code>brew install mysql@5.7</code></li>\n<li><code>export PATH='/user/local/opt/mysql@5.7/bin:$PATH</code></li>\n</ul>\n</li>\n<li>\n<p>サーバー立ち上げ</p>\n<ul>\n<li><code>mysql.server start</code> : stop</li>\n<li><code>mysql -u root -p</code> : ログイン(PASSなし)</li>\n<li><code>show databases;</code> : use {database}</li>\n<li><code>create database {database} default character set utf8mb4 collate utf8mb4_unicode_ci;</code></li>\n<li><code>show tables;</code> : テーブル表示</li>\n</ul>\n</li>\n</ol>\n<h1>Rubyの環境構築( +α Rails )</h1>\n<ol>\n<li>\n<p>rbenvのインストール</p>\n<ul>\n<li><code>brew install rbenv</code></li>\n<li><code>export PATH=\"~/.rbenv/shims:/usr/local/bin:$PATH\"</code></li>\n<li><code>eval \"$(rbenv init -)\"</code></li>\n<li><code>rbenv -v</code></li>\n</ul>\n</li>\n<li>\n<p>Rubyのインストール</p>\n<ul>\n<li><code>rbenv install --list</code></li>\n<li><code>rbenv install x.x.x</code></li>\n<li><code>rbenv global x.x.x</code> : PCのRubyのバージョン変更</li>\n<li><code>rbenv local x.x.x</code> : カレントディレクトリの 〃 </li>\n<li><code>rbenv rehash</code> : 再読み込み</li>\n<li><code>ruby -v</code></li>\n</ul>\n</li>\n<li>\n<p>Railsのインストール</p>\n<ul>\n<li><code>gem install bundler</code> : Bundlerのインストール</li>\n<li><code>bundle -v</code> : <code>gem updata bundler</code></li>\n<li><code>bundle init</code> : ディレクトリ内で</li>\n<li><code>vi Gemfile</code> : gem \"rails\"のコメントアウト外す</li>\n<li><code>gem install rails</code> : rails CLI</li>\n<li><code>bundle install --path=vendor/bundle</code></li>\n<li><code>rails new {project}</code></li>\n<li><code>bundle exec rails new {project}</code></li>\n</ul>\n</li>\n<li>\n<p>Rails立ち上げ</p>\n<ul>\n<li><code>bundle exec rails s</code></li>\n<li><code>rails server</code> : CLI</li>\n</ul>\n</li>\n</ol>\n<h1>Vue.jsの環境構築</h1>\n<ol>\n<li>\n<p>Vue CLIのインストール</p>\n<ul>\n<li><code>yarn global add @vue/cli</code></li>\n<li><code>npm install -g @vue/cli</code></li>\n<li><code>vue --version</code></li>\n<li><code>vue create {project}</code> : Enter or arrow</li>\n<li><code>npm run serve</code> : npm run build</li>\n<li>`yarn serve<code></code> yarn build</li>\n</ul>\n</li>\n</ol>\n<h1>Gatsby.jsの環境構築</h1>\n<ol>\n<li>\n<p>Gatsby CLIのインストール</p>\n<ul>\n<li><code>npm install -g gatsby-cli</code></li>\n<li><code>gatsby new {project}</code></li>\n<li><code>gatsby develop</code></li>\n<li><code>gatsby build</code></li>\n</ul>\n</li>\n</ol>\n<h1>Angularの環境構築</h1>\n<ol>\n<li>\n<p>Angular CLIのインストール</p>\n<ul>\n<li><code>npm install -g @angular/cli</code></li>\n<li><code>ng new {project}</code></li>\n<li><code>ng serve</code></li>\n</ul>\n</li>\n</ol>\n<h1>Reactの環境構築</h1>\n<ol>\n<li>\n<p>プロジェクト立ち上げ</p>\n<ul>\n<li><code>npx create-react-app {project}</code></li>\n<li><code>npm start</code></li>\n</ul>\n</li>\n</ol>\n<h1>React-360の環境構築</h1>\n<ol>\n<li>\n<p>React-360 CLIのインストール</p>\n<ul>\n<li><code>npm install -g react-360-cli</code></li>\n<li><code>react-360 init {project}</code></li>\n<li><code>npm start</code></li>\n</ul>\n</li>\n</ol>\n<h1>Flutterの環境構築</h1>\n<ol>\n<li>\n<p>Flutter SDKのインストール</p>\n<ul>\n<li><a href=\"https://flutter.dev/docs/get-started/install/macos\">here</a></li>\n<li><code>unzip ~/Downloads/flutter_macos_v1.9.1+hotfix.6-stable.zip</code></li>\n<li><code>flutter precache</code> : iOSおよびAndroidのバイナリを事前にダウンロード</li>\n<li><code>flutter doctor</code> : 不足している依存関係の確認</li>\n<li><code>export PATH=\"$PATH:[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin\"</code></li>\n<li><code>which flutter</code> : 場所確認</li>\n</ul>\n</li>\n<li>\n<p>Xcodeのインストール</p>\n<ul>\n<li>`sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</li>\n<li><code>sudo xcodebuild -runFirstLaunch</code></li>\n</ul>\n</li>\n<li>\n<p>Flutter立ち上げ</p>\n<ul>\n<li><code>flutter create {project}</code></li>\n<li><code>flutter run</code></li>\n</ul>\n</li>\n</ol>\n<h1>GitHubの環境構築</h1>\n<ol>\n<li>\n<p>sshKeyの作成と設定</p>\n<ul>\n<li><a href=\"https://qiita.com/shunyaendoh/items/7a347f3c7dc505049b60\">here</a></li>\n<li><code>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"</code></li>\n<li><code>chmod 600 ~/.ssh/id_rsa_github</code></li>\n<li><code>vi ~/.ssh/config</code></li>\n<li><code>ssh -T {HOST}</code></li>\n<li>GitHub => Setting => SSH and GPG keys</li>\n</ul>\n</li>\n<li>\n<p>複数アカウントの際のコマンド</p>\n<ul>\n<li><code>to main(sub)</code></li>\n<li><code>git remote add origin git@github(-sub):&#x3C;account>/&#x3C;repo></code></li>\n</ul>\n</li>\n</ol>\n<h1>TypeScriptの環境構築</h1>\n<ol>\n<li>\n<p>typescriptコンパイラのインストール</p>\n<ul>\n<li><code>npm install -g typescript</code></li>\n<li><code>tsc -v</code></li>\n</ul>\n</li>\n<li>\n<p>コンパイルから実行</p>\n<ul>\n<li><code>tsc {file(.ts)}</code></li>\n<li><code>node {file(.js)}</code></li>\n</ul>\n</li>\n</ol>","fields":{"slug":"/setting/"}},{"frontmatter":{"title":"LaravelでJavascriptやCSSを使おう( Laravel Mix )","date":"2019-9-28","keywords":"Laravel","image":"https://webty.jp/staffblog/wp-content/uploads/2019/08/thumbnail_laravel-660x500.png"},"excerpt":"はじめに Laravelを学んで「一通りデータベースとのCRUD処理はもう出来た！」という人のための記事。\n次はそのサイトにJavascriptやCSSを使ってみよう。\n今回はJavascriptでアラートを表示させてみます。 Laravel Mixとは Laravel Mix…","html":"<h1>はじめに</h1>\n<blockquote>\n<p>Laravelを学んで「一通りデータベースとのCRUD処理はもう出来た！」という人のための記事。\n次はそのサイトにJavascriptやCSSを使ってみよう。\n今回はJavascriptでアラートを表示させてみます。</p>\n</blockquote>\n<h2>Laravel Mixとは</h2>\n<blockquote>\n<p>Laravel Mixは多くの一般的なCSSとJavaScriptのプリプロセッサを使用し、Laravelアプリケーションために、構築過程をWebpackでスラスラと定義できるAPIを提供しています。(<a href=\"https://readouble.com/laravel/5.5/ja/mix.html\">Laravel公式リファレンス</a>)</p>\n</blockquote>\n<p><font color=red>何言ってんだ・・・？</font>\n僕もわかりません笑\n簡単にいうと、</p>\n<blockquote>\n<p>Laravel Mixはjsファイルやcss(sass)ファイルをLaravel上で使えるようにしてくれるやつ。\n( jsファイルやsassファイルをコンパイルしてLaravel上で使えるようにするAPI )</p>\n</blockquote>\n<h2>インストールと準備</h2>\n<p>以下をお手元のパソコン君にインストールしてください\n・ node.js (<a href=\"https://nodejs.org/ja/download/\">node.js公式サイト</a>)\n・ npm (node.js用のパッケージマネージャ。Vue.js, React, Bootstrapなどがインストール出来ます。Node.jsをインストールすれば使えるようになります。)</p>\n<h3>インストール方法</h3>\n<p>今回は以下の２つの方法を紹介したいと思います。</p>\n<p>A. CUIを使ったコマンドでのインストール方法( 難易度: 普通 )\nB. 公式サイトからインストーラをダウンロードしてくる方法( 難易度: 低い )</p>\n<p><font color= red>僕はAのCUIでのインストール方法をおすすめしています。</font></p>\n<h3>A. CUIでのインストール( Homebrewを使うのでMacのみです )</h3>\n<p>手順は以下になります。</p>\n<ol>\n<li>Homebrewのインストール( <a href=\"https://brew.sh/index_ja.html\">Homebrew公式サイト</a> )</li>\n<li>nodebrewのインストール</li>\n<li>node.jsのインストール</li>\n</ol>\n<h4>1. Homebrewのインストール</h4>\n<p>まずはターミナル( コンソール画面 )を開きましょう。そこに、</p>\n<pre><code>/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n</code></pre>\n<p>こちらを丸々コピーして実行( エンターキー )してください。\nインストールは時間がかかるので新たにコマンドは打たず、$マークが出るまでほうっておきましょう。\n( 2019/9/28 現在のコマンドになりますので、<a href=\"https://brew.sh/index_ja.html\">公式サイト</a>を確認してください。)</p>\n<p>無事にインストールが出来たら<code>brew -v</code>コマンドを打ってみましょう。( Homebrewのバージョンを確認するコマンドです。 )</p>\n<img width=\"100%\" alt=\"スクリーンショット 2019-09-28 15.03.27.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/1eef30c5-f7df-f11f-5aab-a0435478c146.png\">\n<p>このように「Homebrew ○.○.○○」と表示されていれば成功です。</p>\n<h4>2. nodebrewのインストール</h4>\n<p>Homebrewが無事にインストール出来たのでnodebrewをインストールできるようになりました。ターミナル上に、</p>\n<pre><code>brew install nodebrew\n</code></pre>\n<p>こちらを打って実行してください。\nこのコマンドはHomebrewを使ってnodebrewをインストールするコマンドです。</p>\n<p>インストールが完了したら<code>nodebrew -v</code>コマンドを打ってみましょう。( nodebrewのバージョンを確認するコマンドです。 )</p>\n<img width=\"100%\" alt=\"スクリーンショット 2019-09-28 15.15.12.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/b9a591cc-fae8-1317-073f-ec5ce0babba2.png\">\n<p>何やらたくさん出てきましたが一番上に「nodebrew ○.○.○」と表示されていれば成功です。 ( なお、他に表示されているのは使い方の例や使えるコマンド集です。いわば説明書ですね。 )</p>\n<h4>3. node.jsのインストール</h4>\n<p>お待たせしましたやっとnode.jsがインストール出来ます。\nターミナルは開いていますね？以下を入力して実行してください。</p>\n<pre><code>nodebrew install-binary stable\n</code></pre>\n<p>このコマンドはnodebrewを使って安定版のnodeをインストールするコマンドです。なお、最新版をインストールしたい場合は、</p>\n<pre><code>nodebrew install-binary latest\n</code></pre>\n<p>としてください。</p>\n<p>インストールが完了したら<code>nodebrew ls</code>コマンドを実行してください。\nこのコマンドはインストールされたnodeのリストを表示するコマンドです。</p>\n<img width=\"100%\" alt=\"スクリーンショット 2019-09-28 15.28.50.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/cc7ca67b-ba10-6b38-c36d-a00ef9c720f3.png\">\n<p>このように「v○.○.○」と表示されていればインストール成功です。\nその下に<code>current: none</code>と出ているのはインストールした直後は有効化されていない為です。</p>\n<p>そこで、</p>\n<pre><code>nodebrew use v○.○.○\n</code></pre>\n<p>コマンドで有効化します。( ○はお使いのバージョンを入力してください。 )\nもう一度<code>nodebrew ls</code>コマンドを実行すると、</p>\n<img width=\"100%\" alt=\"スクリーンショット 2019-09-28 15.27.56.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/800d1597-513c-b36b-1cbb-ddc31b2cc782.png\">\n<p>インストールしたバージョンのnodeが設定されました。</p>\n<h5>＊ nodeコマンドを使えるように環境PATHを通す</h5>\n<p>nodeが無事にインストール出来ましたがこのままではnodeコマンドが使えません。パソコン君にnodeコマンドを使うための道筋を教えてあげましょう。( お使いのshellがbashの場合 )</p>\n<pre><code>echo 'export PATH=$HOME/.nodebrew/current/bin:$PATH' >> ~/.bash_profile\n</code></pre>\n<p>こちらのコマンドは.bash<em>profileというファイルに''の中身を追記しているコマンドです。\n`source ~/.bash</em>profile<code>を実行してください。 このコマンドで再読み込みさせます。 最後に</code>node -v`コマンドを実行してください。</p>\n<img width=\"100%\" alt=\"スクリーンショット 2019-09-28 15.44.03.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/ba7581a6-5cba-c93f-3486-4986d5df4ee9.png\">\n<p>このように「v○○.○○.○」と表示されていれば成功です。</p>\n<h3>B. 公式サイトからインストーラをダウンロードする方法</h3>\n<p>手順は以下になります。</p>\n<ol>\n<li><a href=\"https://nodejs.org/ja/download/\">公式サイト</a>で最新版もしくは推奨板のインストーラをダウンロード</li>\n<li>インストーラをダブルクリックして起動</li>\n<li>指示に従ってインストール</li>\n<li>ターミナルで<code>node -v</code>,<code>npm -v</code>を打ってみて確認</li>\n</ol>\n<p>非常に簡単です。</p>\n<h2>Laravel Mixを使ってみよう</h2>\n<p>「あれ、これなんの記事だっけ？」そう思ったあなた。\n大丈夫です。僕も同じことを思っていました。</p>\n<p>環境構築は時間がかかるのです。やっと準備が整ったので、\n新しくLaravelのプロジェクトを立ち上げましょう。\nターミナルを起動してください。</p>\n<p><code>mkdir {フォルダ名}</code>コマンドでフォルダを新規作成してください。\n次に、<code>cd {フォルダ名}</code>コマンドで作成したフォルダに移動してください。その中で、</p>\n<pre><code>composer create-project --prefer-dist laravel/laravel {プロジェクト名} 5.7\n</code></pre>\n<p>こちらのコマンドを打ってプロジェクトを作成してください。\n( 時間がかかるのでしばらく待ちましょう。 )</p>\n<img width=\"100%\" alt=\"スクリーンショット 2019-09-28 16.11.29.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/530c1120-a038-8d90-5426-554d1a29a622.png\">\n<p>無事に作成が完了すると、「○○○○ successfully」みたいな文字列が表示されて$マークが現れます。</p>\n<p>今回使うエディタはVisual Studio Codeです。</p>\n<p><code>code {プロジェクト名}</code>コマンドを入力してvscodeでプロジェクトを開きましょう。</p>\n<hr>\n<p>ここからはvscodeでの操作になります。\nvscode上でSHIFT(↑) + control(^) + backquote(`)を押してください。\nvscodeでターミナルが使えるようになります。</p>\n<h3>npmのインストール</h3>\n<p><code>npm install</code>コマンドを実行してください。\nこのコマンドは作成したLaravelのプロジェクトのフィルダ直下に入っている「package.json」を参照してそこに記載されているパッケージをインストールしています。\nこのコマンドを実行するとLaravel Mixが使えるようになります。</p>\n<h3>javascriptのファイルを作成</h3>\n<p><code>resources</code>フォルダに<code>assets</code>フォルダを作成してください。\nそしてその中にさらに<code>js</code>フォルダを作ってください。\nその中に<code>app.js</code>と<code>sample.js</code>を作成してください\n(resources&#x3C;assets&#x3C;js&#x3C;app.js,sample.js)</p>\n<img width=\"100%\" alt=\"スクリーンショット 2019-09-28 17.01.32.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/e4df56c6-4b30-c43f-17b7-87b1bbaa74e5.png\">\n<p>そして、sample.jsを開いて以下のように記入してください。</p>\n<pre><code class=\"language-js:sample.js\">alert('CAUTION!!');\n</code></pre>\n<p>次に、app.jsを開いて以下のように記入してください。</p>\n<pre><code class=\"language-js:app.js\">require('./sample');\n</code></pre>\n<h3>webpack.mix.jsを編集</h3>\n<p>作成したLaravelプロジェクトの直下に入っている<code>webpack.mix.js</code>ファイルを開いてください。</p>\n<pre><code class=\"language-js:webpack.mix.js\">const mix = require('laravel-mix');\n\n/*\n |--------------------------------------------------------------------------\n | Mix Asset Management\n |--------------------------------------------------------------------------\n |\n | Mix provides a clean, fluent API for defining some Webpack build steps\n | for your Laravel application. By default, we are compiling the Sass\n | file for the application as well as bundling up all the JS files.\n |\n */\n\nmix.js('resources/js/app.js', 'public/js')\n    .sass('resources/sass/app.scss', 'public/css');\n\n// 以下を追加\nmix.js('resources/assets/js/app.js', 'public/js');\n</code></pre>\n<p>上記の「以下を追加」の下の部分を追加してください。\nこれは<code>resources/assets/js/app.js</code>の中身を\n<code>public/js</code>の中に入れる( コンパイル )という意味で、\n<code>public/js</code>で先ほど書いたapp.jsを読み込めるということです。\n( app.jsにはsample.jsを読み込めるように\n<code>require('./sample')</code>を記入しているのでapp.jsだけ読み込めれば大丈夫ということです。 )</p>\n<h3>sample.blade.phpを作成</h3>\n<p>jsファイルを読み込む準備が出来たので読み込みたいページを作ります。\n<code>resources/views</code>の中に<code>sample.blade.php</code>を作成してください。</p>\n<p>次にターミナル上で以下のコマンドを実行してください。\n<code>php artisan make:auth</code>\nすると<code>views/layouts</code>フォルダが作成されます。</p>\n<img width=\"100%\" alt=\"スクリーンショット 2019-09-28 17.46.19.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/a72cc74e-b881-2027-1b60-7244a42a7b15.png\">\n<p>sample.blade.phpを開いてください。\nそして、以下のように記入してください。</p>\n<pre><code class=\"language-php:sample.blade.php\">@extends('layouts.app')\n</code></pre>\n<h3>web.phpを編集</h3>\n<p><code>routes</code>フォルダに入っている<code>web.php</code>を開いてください。\n以下のように一箇所編集してください。</p>\n<pre><code class=\"language-php:web.php\">&#x3C;?php\n\n/*\n|--------------------------------------------------------------------------\n| Web Routes\n|--------------------------------------------------------------------------\n|\n| Here is where you can register web routes for your application. These\n| routes are loaded by the RouteServiceProvider within a group which\n| contains the \"web\" middleware group. Now create something great!\n|\n*/\n\nRoute::get('/', function () {\n    return view('sample');  // ここを編集 (welcome->sample)\n});\n\nAuth::routes();\n\nRoute::get('/home', 'HomeController@index')->name('home');\n</code></pre>\n<h3>コンパイルとサーバーの立ち上げ</h3>\n<p>今まで書いてきたコードを適応させるために以下のコマンドを実行してください。\n( 時間がかかるのでしばらく待っていてください。 )\n<code>npm run dev</code>\n成功したら以下のように表示されます。\n(なお、<code>npm run dev</code>は開発環境においてのコンパイル方法で余計な機能が付いてきます。実際にサービスとしてデプロイする場合には<code>npm run production</code>コマンドでコンパイルしてください。) <br>\n<img width=\"100%\" alt=\"スクリーンショット 2019-09-28 18.02.27.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/a211ba5c-1fb1-178f-8f9b-8f5c4a0c4923.png\"></p>\n<p>次にサーバーを立ち上げます。\n<code>php artisan serve</code>コマンドを実行してください。\n<img width=\"100%\" alt=\"スクリーンショット 2019-09-28 18.05.14.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/6ddfdd79-96fa-e84b-78d6-d4be21b81288.png\"></p>\n<h3><a href=\"http://127.0.0.1:8000\">http://127.0.0.1:8000</a>へアクセス</h3>\n<img width=\"100%\" alt=\"スクリーンショット 2019-09-28 18.09.51.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/e645b09e-2e3b-046f-5405-e2b4f002ad42.png\">\n<p>無事にアラートが表示されましたか？</p>\n<hr>\n<h2>参考サイト</h2>\n<ul>\n<li><a href=\"https://qiita.com/ryosukes/items/24a556b9e634c183f93b\">Laravel mix事始め</a></li>\n<li><a href=\"https://qiita.com/jaxx2104/items/2277cec77850f2d83c7a\">Node.js と npm インストールとアップデート</a></li>\n<li><a href=\"https://qiita.com/u-dai/items/83766b69a0e18488b005\">[Laravel 5.6] Laravel 開発で Javascript を書きたいとき（Laravel Mix の使い方とか）</a></li>\n<li><a href=\"https://qiita.com/kyosuke5_20/items/c5f68fc9d89b84c0df09\">MacにNode.jsをインストール</a></li>\n<li><a href=\"https://qiita.com/PolarBear/items/62c0416492810b7ecf7c\">Node.js / npm をインストール (Mac環境)</a></li>\n</ul>","fields":{"slug":"/laravelmix/"}},{"frontmatter":{"title":"vue.jsにFont AwesomeとChart.jsとBootstrap4を導入してみた","date":"2019-10-16","keywords":"macOS","image":"https://miro.medium.com/max/874/1*yGrOUQyqX3MBekvP5d-pCA.png"},"excerpt":"はじめに vue.jsのアウトプットの一環としてポートフォリオサイトを作りました。\nその際に躓いた、 vue.jsにFont Awesomeを導入 vue.jsにChart.jsの導入 vue.jsにBootstrap4の導入 主にこちらについてのお話です。 準備 Laravel…","html":"<h1>はじめに</h1>\n<p>vue.jsのアウトプットの一環としてポートフォリオサイトを作りました。\nその際に躓いた、</p>\n<ul>\n<li>vue.jsにFont Awesomeを導入</li>\n<li>vue.jsにChart.jsの導入</li>\n<li>vue.jsにBootstrap4の導入</li>\n</ul>\n<p>主にこちらについてのお話です。</p>\n<h2>準備</h2>\n<p><a href=\"https://qiita.com/shunyaendoh/items/0db9f1257e2c25801012\">LaravelでJavascriptやCSSを使おう( Laravel Mix )</a>\nこちらの記事を参考にしてnode.jsをインストールしておきましょう。</p>\n<h2>目次</h2>\n<ol>\n<li>vue-cliのインストール</li>\n<li>新規vue.jsプロジェクトの立ち上げ</li>\n<li>Font Awesome for vue.jsのインストールと使用方法</li>\n<li>Chart.js for vue.jsのインストールと使用方法</li>\n<li>Bootstrap4 for vue.jsのインストールと使用方法</li>\n</ol>\n<h2>1. vue-cliのインストール</h2>\n<p>そもそもvue-cliって何？</p>\n<blockquote>\n<p>VUE CLI は webpack 4 の上に構築された事前設定済みのビルド設定を提供します。 ( <a href=\"https://jp.vuejs.org/\">公式ドキュメント</a>より )</p>\n</blockquote>\n<p>つまりvue-cilとは、<font color=\"red\">vue.js用の雛形作成ツール</font>。\nvue.jsでプロジェクトを立ち上げようとしたときにスターターキットにして用意してくれます。</p>\n<p>って事でインストールです。\nターミナルを開いて、</p>\n<pre><code>npm install -g @vue/cli\n</code></pre>\n<p>こちらのコマンドを実行してください。</p>\n<p>次に、</p>\n<pre><code>vue --version\n</code></pre>\n<p>このコマンドでインストールが成功したか確認します。\n<img width=\"100%\" alt=\"スクリーンショット 2019-10-16 0.10.31.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/8ef602ec-b147-d4a9-e40f-3d7fda8f32df.png\"></p>\n<p>実際の画面です。\nこのようにバージョンが表示されていれば成功です。</p>\n<h2>2. 新規vue.jsプロジェクトの立ち上げ</h2>\n<p>プロジェクトを作りたいフォルダの中に移動して、</p>\n<pre><code>vue create &#x3C;プロジェクト名>\n</code></pre>\n<p>こちらのコマンドで作成です。</p>\n<p>なお、上記のコマンドを実行すると\n<img width=\"100%\" alt=\"スクリーンショット 2019-10-16 0.15.40.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/b4d429dc-d0b9-dbfb-79fc-a60b1df4970f.png\">\nこのような画面が出てきますが今回は<code>default</code>の状態にし<code>エンターキー</code>を押してください。\n( <code>↑↓キー</code>で移動できます。`)</p>\n<p>完了したら以下のような画面になっているはずです。</p>\n<img width=\"100%\" alt=\"スクリーンショット 2019-10-16 7.34.10.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/ba0db433-1a20-9065-79fe-9996df57f88d.png\">\n<pre><code>cd &#x3C;プロジェクト名>\n</code></pre>\n<p>で立ち上げたプロジェクトのディレクトリの中に入ってください。</p>\n<p>今回使うエディタはvscodeです。</p>\n<pre><code>code .\n</code></pre>\n<p>コマンドで今いるディレクトリをvscodeで開きましょう。\n( もし<code>code</code>コマンドが使えない場合\n=> <a href=\"https://qiita.com/ayatokura/items/69c96306e3dee501e19b\">【Visual Studio Code】コマンドからVS Codeを起動できない場合 (Mac編)</a> )</p>\n<p>これでいよいよFontAwesomeを導入する準備ができました。</p>\n<h2>3. Font Awesome for vue.jsのインストールと使用方法</h2>\n<p>まずは<a href=\"https://github.com/FortAwesome/vue-fontawesome\">公式GitHub</a>にいきます。</p>\n<p><code>Installation</code>の欄をみてみると、</p>\n<pre><code>npm i --save @fortawesome/fontawesome-svg-core\nnpm i --save @fortawesome/free-solid-svg-icons\nnpm i --save @fortawesome/vue-fontawesome\n</code></pre>\n<p>このコマンドを打てとあるので、一行ずつ実行してください。\n三行一気にではありません。\n( $マークは実際には打たないので消しました。 )</p>\n<p>次に、より多くのアイコンを使えるように、</p>\n<pre><code>npm i --save @fortawesome/free-brands-svg-icons\nnpm i --save @fortawesome/free-regular-svg-icons\n</code></pre>\n<p>こちらのコマンドを一行ずつ実行してください。\nこれでインストールは完了です。</p>\n<p>次に、vscodeで<code>src/main.js</code>を開いてください。\nそこに、</p>\n<pre><code class=\"language-js:src/main.js\">import Vue from 'vue'\nimport App from './App.vue'\n\n// 追加\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\nimport { far } from '@fortawesome/free-regular-svg-icons'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { FontAwesomeIcon, FontAwesomeLayers, FontAwesomeLayersText } from '@fortawesome/vue-fontawesome'\nVue.component('font-awesome-icon', FontAwesomeIcon)\nVue.component('font-awesome-layers', FontAwesomeLayers)\nVue.component('font-awesome-layers-text', FontAwesomeLayersText)\nlibrary.add(fas, far, fab)\n// 追加ここまで\n\nVue.config.productionTip = false\n\nnew Vue({\n  render: h => h(App),\n}).$mount('#app')\n</code></pre>\n<p>上記のように書いてください。</p>\n<p>次に<code>src/App.vue</code>を開いて<code>&#x3C;template></code>タグ内に、</p>\n<pre><code class=\"language-vue:src/App.vue\">&#x3C;template>\n  &#x3C;div id=\"app\">\n    &#x3C;img alt=\"Vue logo\" src=\"./assets/logo.png\">\n    &#x3C;HelloWorld msg=\"Welcome to Your Vue.js App\"/>\n    &#x3C;!-- twitterアイコン -->\n    &#x3C;font-awesome-icon :icon=\"['fab','twitter']\" class=\"text-light\"/>\n    &#x3C;!-- qiitaアイコン -->\n    &#x3C;font-awesome-layers>\n      &#x3C;font-awesome-icon :icon=\"['fas','square']\" class=\"text-light\"/>\n      &#x3C;font-awesome-icon :icon=\"['fas','search']\" transform=\"shrink-1\" :style=\"{ color: 'black' }\" />\n    &#x3C;/font-awesome-layers>\n  &#x3C;/div>\n&#x3C;/template>\n</code></pre>\n<p>これでFontAwesomeが使えているはずです。</p>\n<pre><code>npm run serve\n</code></pre>\n<p>コマンドを入力して、\n<code>localhost:8001</code>にアクセスしてください。\n以下のようになったら成功です。\n<img width=\"100%\" alt=\"スクリーンショット 2019-10-16 8.17.07.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/99434327-7598-bf65-d329-c58afa185d4f.png\"></p>\n<p>なおQIITAのアイコンはFont Awesomeにはないので、\n<a href=\"https://qiita.com/hkusu/items/fda8d8178dd693f95f3c\">Font Awesome で Qiitaロゴっぽいアイコンを表現</a>\nこちらの記事を参考に作りました。</p>\n<h2>4. Chart.js for vue.jsのインストールと使用方法</h2>\n<p>まずは<a href=\"https://vue-chartjs.org/ja/guide/\">公式ドキュメント</a>を見にいきます。</p>\n<pre><code>npm install vue-chartjs chart.js --save\n</code></pre>\n<p>コマンドでインストールできるようですので実行してください。\n今回は<code>src/components/</code>内に<code>DoughnatChart.vue</code>ファイルを作りました。</p>\n<pre><code class=\"language-vue:DoughnatChart.vue\">&#x3C;script>\nimport { Doughnut } from 'vue-chartjs'\nexport default {\n  extends: Doughnut,\n  props: {\n    chartdata: {\n      type: Object,\n      default: null\n    }\n  },\n  data: () => ({\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      animation: false,\n      tooltips: {\n        enabled: false\n      },\n      hover: {\n        mode: null\n      }\n    }\n  }),\n  mounted() {\n    this.renderChart(this.chartdata, this.options)\n  }\n}\n&#x3C;/script>\n</code></pre>\n<p>次に、<code>src/App.vue</code>です。</p>\n<pre><code class=\"language-vue:src/App.vue\">&#x3C;template>\n  &#x3C;div id=\"app\">\n    &#x3C;img alt=\"Vue logo\" src=\"./assets/logo.png\">\n    &#x3C;HelloWorld msg=\"Welcome to Your Vue.js App\"/>\n    &#x3C;!-- twitterアイコン -->\n    &#x3C;font-awesome-icon :icon=\"['fab','twitter']\" class=\"text-dark\"/>\n    &#x3C;!-- qiitaアイコン -->\n    &#x3C;font-awesome-layers>\n      &#x3C;font-awesome-icon :icon=\"['fas','square']\" class=\"text-dark\"/>\n      &#x3C;font-awesome-icon :icon=\"['fas','search']\" transform=\"shrink-1\" :style=\"{ color: 'white' }\" />\n    &#x3C;/font-awesome-layers>\n    &#x3C;!-- doughnatchart -->\n    &#x3C;doughnut :chartdata=\"{datasets: [{backgroundColor:['coral','gray'], data: [75, 25]}]}\" class=\"doughnat\"/>\n  &#x3C;/div>\n&#x3C;/template>\n\n&#x3C;script>\nimport HelloWorld from './components/HelloWorld.vue'\n// 追加\nimport Doughnut from './components/DoughnutChart.vue'\n\nexport default {\n  name: 'app',\n  components: {\n    HelloWorld,\n    // 追加\n    Doughnut\n  }\n}\n</code></pre>\n<p><code>&#x3C;script></code>タグ内を変更し、<code>&#x3C;template></code>タグに追記してください。</p>\n<pre><code>npm run serve\n</code></pre>\n<p>コマンドでサーバーを立ち上げ確認しましょう。</p>\n<img width=\"100%\" alt=\"スクリーンショット 2019-10-16 9.57.27.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/0c6706d3-b3e7-9a1b-5fbb-002617ac4f23.png\">\n<p>無事にChart.jsを導入できましたか？</p>\n<h2>5. Bootstrap4 for vue.jsのインストールと使用方法</h2>\n<p>まずは<a href=\"https://bootstrap-vue.js.org/\">公式ドキュメント</a>です。</p>\n<pre><code>vue add bootstrap-vue\n</code></pre>\n<p>コマンドでインストールできると書いてあるので実行しましょう。</p>\n<p>これでBootstrap4は導入完了です。\n試しに<code>src/App.vue</code>ファイルを開いて、</p>\n<pre><code>&#x3C;!-- twitterアイコン -->\n&#x3C;font-awesome-icon :icon=\"['fab','twitter']\" class=\"text-success\"/>\n</code></pre>\n<p><code>class=\"text-sccess\"</code>に変更してみましょう。</p>\n<img width=\"100%\" alt=\"スクリーンショット 2019-10-16 12.13.25.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/21b22857-cbbb-4055-4d65-2dff3822cf15.png\">\n<p>twitterのマークが緑色になりました！</p>\n<h3>ちなみに</h3>\n<p>今回作ったサイトは<a href=\"https://shunyaendoh1215.github.io/Portfolio-vue/\">こちら</a>です。</p>\n<img width=\"100%\" alt=\"スクリーンショット 2019-10-15 22.21.32.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/489303/7ea1dc4a-5b2c-23f3-0737-6a904b7cf6ee.png\">","fields":{"slug":"/vuejs/"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}